import Vue from 'vue';
import Router from 'vue-router';

import { store } from '@/store'

////////////////////////////////////////////////////////////////
//////////////////////// VIEW IMPORTS //////////////////////////
////////////////////////////////////////////////////////////////
import Home from '@/views/Home.vue';
// import Profile from '@/views/Profile.vue';
//
// import Login from '@/views/Login.vue';
// import SignUp from '@/views/SignUp.vue';

import AuthGuard from '@/router/AuthGuard';
import AdminGuard from '@/router/AdminGuard';

// Page imports for Supplier schema.
import Suppliers from '@/structures/supplier/Suppliers.vue';
import NewSupplier from '@/structures/supplier/NewSupplier.vue';
import Supplier from '@/structures/supplier/Supplier.vue';

// Page imports for User schema.
import Users from '@/structures/user/Users';
import NewUser from '@/structures/user/NewUser';
import User from '@/structures/user/User';
import NewMattermostUser from '@/structures/user/NewMattermostUser';

// Page imports for Team schema.
import Teams from '@/structures/team/Teams';
import NewTeam from '@/structures/team/NewTeam';
import Team from '@/structures/team/Team';

// Page imports for ToolType schema.
import ToolTypes from '@/structures/toolType/ToolTypes';
import NewToolType from '@/structures/toolType/NewToolType';
import ToolType from '@/structures/toolType/ToolType';

// Page imports for Tool schema.
import NewTool from '@/structures/tool/NewTool';
import Tool from '@/structures/tool/Tool';

// Page imports for CheckoutObject schema.
import CheckoutDevices from '@/structures/checkoutDevice/CheckoutDevices';
import NewCheckoutDevice from '@/structures/checkoutDevice/NewCheckoutDevice';
import CheckoutDevice from '@/structures/checkoutDevice/CheckoutDevice';

import ToolReceptacle from '@/structures/checkoutDevice/ToolReceptacle';

Vue.use(Router);

const router = new Router({
	mode: 'history',
	base: process.env.BASE_URL,
	routes: [
		{
			path: '/',
// 			path: '/home',
			name: 'home',
			component: Home
		},
// 		{
// 			path: '/profile',
// 			name: 'profile',
// 			component: Profile,
// 			beforeEnter: AuthGuard
// 		},
// 		{
// 			path: '/login',
// 			name: 'login',
// 			component: Login
// 		},
// 		{
// 			path: '/signup',
// 			name: 'signup',
// 			component: SignUp
// 		},
		{
			path: '/bookroom',
			name: 'bookRoom',
			component: ToolTypes,
			props: {onlyRooms: true},
			beforeEnter: AuthGuard
		},
		{
			path: '/suppliers',
			name: 'suppliers',
			component: Suppliers,
			beforeEnter: AuthGuard
		},
		{
			path: '/suppliers/new',
			name: 'newSupplier',
			component: NewSupplier,
			beforeEnter: AuthGuard
		},
		{
			path: '/suppliers/:id',
			name: 'supplier',
			props: true,
			component: Supplier,
			beforeEnter: AuthGuard
		},
		{
			path: '/users',
			name: 'users',
			component: Users,
			beforeEnter: AuthGuard
		},
		{
			path: '/users/newMattermostUser',
// 			path: '/',
			name: 'newMattermostUser',
			component: NewMattermostUser
		},
		{
			path: '/users/new/:teamID?',
			name: 'newUser',
			props: true,
			component: NewUser,
			beforeEnter: AuthGuard
		},
		{
			path: '/users/:id',
			name: 'user',
			props: true,
			component: User,
			beforeEnter: AuthGuard
		},
		{
			path: '/teams',
			name: 'teams',
			component: Teams,
			beforeEnter: AuthGuard
		},
		{
			path: '/teams/new',
			name: 'newTeam',
			component: NewTeam,
			beforeEnter: AdminGuard
		},
		{
			path: '/teams/:id',
			name: 'team',
			props: true,
			component: Team,
			beforeEnter: AuthGuard
		},
		{
			path: '/tools',
			name: 'tools',
			component: ToolTypes,
			beforeEnter: AuthGuard
		},
		{
			path: '/toolTypes',
			name: 'toolTypes',
			component: ToolTypes,
			beforeEnter: AuthGuard
		},
		{
			path: '/toolTypes/new',
			name: 'newToolType',
			component: NewToolType,
			beforeEnter: AdminGuard
		},
		{
			path: '/toolTypes/:id',
			name: 'toolType',
			props: true,
			component: ToolType,
			beforeEnter: AuthGuard
		},
		{
			path: '/tools/new/:toolTypeID?',
			name: 'newTool',
			props: true,
			component: NewTool,
			beforeEnter: AdminGuard
		},
		{
			path: '/tools/:id',
			name: 'tool',
			props: true,
			component: Tool,
			beforeEnter: AuthGuard
		},
		{
			path: '/checkoutDevices/new/',
			name: 'newCheckoutDevice',
			component: NewCheckoutDevice,
			beforeEnter: AdminGuard
		},
		{
			path: '/checkoutDevices',
			name: 'checkoutDevices',
			component: CheckoutDevices,
			beforeEnter: AuthGuard
		},
		{
			path: '/checkoutDevices/:id',
			name: 'checkoutDevice',
			props: true,
			component: CheckoutDevice,
			beforeEnter: AuthGuard
		},
		{
			path: '/checkoutDevices/:checkoutDeviceID/:toolReceptacleID',
			name: 'toolReceptacle',
			props: true,
			component: ToolReceptacle,
			beforeEnter: AuthGuard
		},

		//     {
		//       path: "/about",
		//       name: "about",
		//       // route level code-splitting
		//       // this generates a separate chunk (about.[hash].js) for this route
		//       // which is lazy-loaded when the route is visited.
		//       component: () =>
		//         import(/* webpackChunkName: "about" */ "./views/About.vue")
		//     }
	]
});

// router.afterEach(to => {
// 	localStorage.setItem("LAST_ROUTE", to.name);
// });

router.beforeEach((to, from, next) => {
	const lastRouteName = localStorage.getItem("LAST_ROUTE");
	const lastRouteID = localStorage.getItem("LAST_ROUTE_ID");

	const shouldRedirect = Boolean( to.name === "user" && lastRouteName );

	if (shouldRedirect) {
		store.dispatch('loadEverything')
		.then(() => {
			console.log("redirecting");
			console.log(lastRouteParams.id);
			localStorage.removeItem("LAST_ROUTE");
			localStorage.removeItem("LAST_ROUTE_ID");
			next({ name: lastRouteName, params: {id: lastRouteID} });
		})
		.catch((err) => {
			next(err);
		});
	} else {
		console.log("not redirecting");
		next();
	}
});

export default router;
