<template>
	<v-container>
		<v-row v-if="error">
			<v-col cols="12" sm="6" offset-sm="3">
				<app-alert @dismissed="onDismissed" :text="error.message"></app-alert>
			</v-col>
		</v-row>
		<v-row>
			<v-col cols="12" sm="6" offset-sm="3">
				<h2 class="primary--text">Add a Tool Type</h2>
			</v-col>
		</v-row>
		<v-row>
			<v-col cols="12">
				<form ref="createToolTypeForm" @submit.prevent="onCreateToolType">
					<v-row class="mb-0 mt-0">
						<v-col cols="12" sm="6" offset-sm="3">
							<v-text-field
								name="ToolTypeName"
								label="Name of Tool/Category"
								id="tool-type-name"
								v-model="toolTypeName"
								:rules="stdRules"
								required
							>
							</v-text-field>
						</v-col>
					</v-row>
					<v-row class="mb-0 mt-0">
						<v-col cols="12" sm="6" offset-sm="3">
							<v-text-field
								name="ToolTypeChineseName"
								label="Chinese Name of Tool/Category"
								id="tool-type-chinese-name"
								v-model="toolTypeChineseName"
								:rules="stdRules"
								required
							>
							</v-text-field>
						</v-col>
					</v-row>
					<v-row>
						<v-col cols="1" sm="1" offset-sm="3">
							<v-avatar>
								<img :src="teamImageURL"></v-img>
							</v-avatar>
						</v-col>
						<v-col cols="11" sm="5">
							<v-select
								name="ToolTypeParentType"
								:items="parentsList"
								label="Parent Tool Type"
								id="tool-type-parent"
								v-model="toolTypeParentType"
								:rules="parentRules"
								required
							></v-select>
						</v-col>
					</v-row>
					<v-row class="mb-0 mt-0">
						<v-col cols="6" sm="3" offset-sm="3">
							<v-text-field
								name="ToolTypeCost"
								label="Cost of Tool"
								id="tool-type-cost"
								v-model="toolTypeCost"
								type="number"
								prefix="¥"
								suffix="RMB"
								:rules="costRules"
								required
							>
							</v-text-field>
						</v-col>
					</v-row>

					toolTypeIsTool: 		true,

					<v-row class="mb-0 mt-0">
						<v-col cols="12" sm="6" offset-sm="3">
							<v-text-field
								name="ToolTypeInstructionsURL"
								label="Instructions/Details URL"
								id="tool-type-instructions-url"
								v-model="toolTypeInstructionsURL"
								:rules="urlRules"
								required
							>
							</v-text-field>
						</v-col>
					</v-row>
					<v-row>
						<v-col cols="12" sm="6" offset-sm="3">
							<v-file-input
								label="Tool Type Image"
								filled
								show-size
								chips
								accept="image/*"
								prepend-icon="mdi-camera"
								ref="toolTypeImage"
								:rules="imageFileRules"
								:loading="loading"
								@change="onFilePicked"
								required
							></v-file-input>
						</v-col>
					</v-row>
					<v-row v-if="toolTypeImageURL">
						<v-col cols="12" sm="6" offset-sm="3">
							<v-card>
								<v-img :src="toolTypeImageURL" max-height="300" contain></v-img>
								<v-card-title class="title">{{ toolTypeImageName }}</v-card-title>
							</v-card>
						</v-col>
					</v-row>
					<v-row>
						<v-col cols="12" sm="6" offset-sm="3">
							<v-btn
								class="primary"
								:disabled="!formIsValid() || loading"
								:loading="loading"
								type="submit"
							>
								Create Tool Type
							</v-btn>
						</v-col>
					</v-row>
				</form>
			</v-col>
		</v-row>
		<v-row v-if="error">
			<v-col cols="12" sm="6" offset-sm="3">
				<app-alert @dismissed="onDismissed" :text="error.message"></app-alert>
			</v-col>
		</v-row>
	</v-container>
</template>

<script>
export default {
	props: ['parentID'],
	data() {
		return {
			toolTypeName: 			'Oscilloscope ',
			toolTypeChineseName: 	'示波器',
			toolTypeParentType:		'root',
			toolTypeCost: 			0,
			toolTypeIsTool: 		true,
			toolTypeInstructionsURL:'https://wiki.hax.co/Shop_Tools:_Oscilloscopes',
			toolTypeImageURL:		'',

			toolTypeImage: 			null,
			toolTypeImageName: 		'',

			parentsList: 			[],
			parentsListDict: 		{},

			stdRules: [
				value => !!value || 'Cannot be blank.'
			],
			parentRules: [
				value => (this.parentsList.includes(value)) || 'Please choose a parent tool type from the list.'
			],
			imageFileRules: [
				value => {
					if (value) {
						if (value["type"]) {
							if (value["name"]) {
								return (value["type"].split('/')[0] === 'image' && value["name"].lastIndexOf('.') > 0) || 'Requires a valid image file.';
							}
							return "File name not found.";
						}
						return "File type not found.";
					}
					return 'Required.';
				}
			],
			urlRules: [
				value => {
					const regexp =  /^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/;
					return regexp.test(value) || 'Must be a valid URL.';
				}
			],
			costRules: [
				value => {
					if (value) {
						if (value >= 0) {
							return true;
						}
						return 'Must be a positive number';
					}
					return 'Needs an initial value. 0 is valid.';
				}
			]
		};
	},
	computed: {
		parentToolTypeImageURL() {
			console.log(this.$store.getters.loadedToolType(this.parentsListDict[this.parent]).imageURL);
			return this.$store.getters.loadedToolType(this.parentsListDict[this.parent]).imageURL;
		},
		loading() {
			return this.$store.getters.loading;
		},
		error() {
			return this.$store.getters.error;
		}
	},
	created() {
		for (let toolType of this.$store.getters.loadedToolTypes) {
			this.parentsList.push(toolType['name']);
			this.parentsListDict[toolType['name']] = toolType._id;
			if (this.parentID === toolType._id) {
				this.toolTypeParentType = toolType['name'];
			}
		}
		if (!this.parentID) {
			this.toolTypeParentType = this.parentsList[0];
		}
	},
	methods: {
		formIsValid() {
			if (this.$refs.createToolTypeForm && this.$refs.createToolTypeForm.checkValidity) {
				if (this.$refs.toolTypeImage && this.$refs.toolTypeImage.validate) {
					return this.$refs.createToolTypeForm.checkValidity() && this.$refs.toolTypeImage.validate();
				}
			}
			return false;
		},
		onCreateToolType() {
			if (!this.formIsValid()) {
				this.$store.dispatch('setError', 'Invalid input information.');
				return;
			}
			const toolTypeData = {
				name:			this.toolTypeName,
				chineseName: 	this.toolTypeChineseName,
				parentID:		this.parentsListDict[this.toolTypeParentType],
				cost: 			this.toolTypeCost,
				isTool:			this.toolTypeIsTool,
				instructionsURL:this.toolTypeInstructionsURL,
				imageURL:		this.toolTypeImageURL,
			};
			this.$store.dispatch('createToolType', toolTypeData);
		},
		onFilePicked(file) {
			if (file) {
				let filename = file.name;
				if (!this.$refs.toolTypeImage.validate()) {
					return;
				}
				const fileReader = new FileReader()
				fileReader.addEventListener('load', () => {
					this.toolTypeImageURL = fileReader.result;
					this.toolTypeImageName = filename;
				})
				fileReader.readAsDataURL(file);
				this.toolTypeImage = file;
			} else {
				this.toolTypeImageURL = '';
				this.toolTypeImage = null;
				this.toolTypeImageName = '';
			}
		},
		// This is a function that you link to the dismissal event of the error popup.
		// When the error popup is dismissed, this tells the vuex state to just clear the error which makes the popup element also become invisible.
		onDismissed() {
			 this.$store.dispatch('clearError');
		}
	}
};
</script>
