<template>
	<v-container>
		<v-row>
			<v-col cols="12" sm="6" offset-sm="3">
				<h2 class="primary--text">Welcome {{ mattermostDetails?mattermostDetails.first_name:"" }}! It looks like you're new</h2>
				<p class="primary--text">please confirm the following details to create your account.</p>
			</v-col>
		</v-row>
		<v-row>
			<v-col cols="12">
				<form ref="createUserForm" @submit.prevent="onCreateUser">
					<v-row class="mb-0 mt-0">
						<v-col cols="12" sm="6" offset-sm="3">
							<v-text-field
								v-bind="userNameProps"
								name="UserName"
								label="Full Name"
								id="user-name"
								v-model="userName"
								:rules="stdRules"
								required
							>
							</v-text-field>
						</v-col>
					</v-row>
					<v-row class="mb-0 mt-0">
						<v-col cols="12" sm="6" offset-sm="3">
							<v-text-field
								v-bind="emailProps"
								name="UserEmail"
								label="Company Email Address"
								id="user-email"
								v-model="userEmail"
								:rules="emailRules"
								required
								type="email"
							>
							</v-text-field>
						</v-col>
					</v-row>
					<v-row class="mb-0 mt-0">
						<v-col cols="12" sm="6" offset-sm="3">
							<v-text-field
								name="UserWechat"
								label="Wechat account ID"
								id="user-wechat"
								v-model="userWechat"
								:rules="stdRules"
								required
							>
							</v-text-field>
						</v-col>
					</v-row>
					<v-row class="mb-0 mt-0">
						<v-col cols="12" sm="6" offset-sm="3">
							<v-text-field
								v-bind="mattermostProps"
								name="UserMattermost"
								label="Mattermost account GUID"
								id="user-mattermost"
								v-model="userMattermost"
								:rules="stdRules"
								required
							>
							</v-text-field>
						</v-col>
					</v-row>
					<v-row class="mb-0 mt-0">
						<v-col cols="12" sm="6" offset-sm="3">
							<v-text-field
								name="UserPhone"
								label="Chinese Phone #"
								id="user-phone"
								v-model="userPhone"
								:rules="phoneRules"
								required
							>
							</v-text-field>
						</v-col>
					</v-row>
					<v-row>
						<v-col cols="12" sm="6" offset-sm="3">
							<v-select
								name="UserLang"
								:items="availableLangsList"
								label="User Language"
								id="user-lang"
								v-model="userLang"
								:rules="langRules"
								required
							></v-select>
						</v-col>
					</v-row>
					<v-row>
						<v-col cols="1" sm="1" offset-sm="3">
							<v-avatar>
								<img :src="teamImageURL"></v-img>
							</v-avatar>
						</v-col>
						<v-col cols="11" sm="5">
							<v-select
								name="UserTeam"
								:items="teamsList"
								label="User Team"
								id="userTeam"
								v-model="userTeam"
								:rules="teamRules"
								chips
								required
							>
							</v-select>
						</v-col>
					</v-row>
					<v-row class="mb-0 mt-0">
						<v-col cols="12" sm="6" offset-sm="3">
							<v-text-field
								v-bind="positionProps"
								name="UserPosition"
								label="Team Position"
								id="user-position"
								v-model="userPosition"
								:rules="stdRules"
								required
							>
							</v-text-field>
						</v-col>
					</v-row>
					<v-row>
						<v-col cols="12" sm="6" offset-sm="3">
							<v-textarea
								name="UserIntroduction"
								label="Self Introduction"
								id="user-introduction"
								v-model="UserIntroduction"
								hint="A quick introduction about yourself for other HAXers and staff members to see.  eg: 'grew up in Australia, studied nursing in USA, love playing Ultimate frisbee, always keen to chat about web design'."
								:rules="stdRules"
								required
							>
							</v-textarea>
						</v-col>
					</v-row>
					<v-row>
						<v-col cols="12" sm="6" offset-sm="3">
							<v-file-input
								label="User Profile Image"
								filled
								show-size
								chips
								accept="image/*"
								prepend-icon="mdi-camera"
								ref="userImage"
								:rules="imageFileRules"
								:loading="loading"
								@change="onFilePicked"
								required
							></v-file-input>
						</v-col>
					</v-row>
					<v-row v-if="userImageURL">
						<v-col cols="12" sm="6" offset-sm="3">
							<v-card>
								<v-img :src="userImageURL" max-height="200" contain></v-img>
								<v-card-title class="title">{{ userImageName }}</v-card-title>
							</v-card>
						</v-col>
					</v-row>
					<v-row>
						<v-col cols="12" sm="6" offset-sm="3">
							<v-btn
								class="primary"
								:disabled="!formIsValid() || loading"
								:loading="loading"
								type="submit"
							>
								Create User
							</v-btn>
						</v-col>
					</v-row>
				</form>
			</v-col>
		</v-row>
	</v-container>
</template>

<script>
export default {
	props: ['teamID'],
	data() {
		return {
			userName: '',
			userEmail: '',
			userWechat: '',
			userMattermost: '',
			userPhone: '',
			userLang: 'English',
			userTeam: '',
			userPosition: '',
			UserIntroduction: '',
			userImageURL: '',
			userImage: null,
			userImageName: '',
			teamsList: [],
			teamsListDict: {},
			availableLangsList: ['English', '中文'],
			userNameProps: {},
			emailProps: {},
			positionProps: {},
			mattermostProps: {},
			stdRules: [
				value => !!value || 'Cannot be blank.'
			],
			emailRules: [
				value => {
					const regexp = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;
					return regexp.test(value) || 'Please enter a valid email address.';
				}
			],
			phoneRules: [
				value => !!value || 'Cannot be blank.'
			],
			langRules: [
				value => (this.availableLangsList.includes(value)) || 'Please choose a language from the list.'
			],
			teamRules: [
				value => (this.teamsList.includes(value)) || "If you can't find the team, please make a new team."
			],
			imageFileRules: [
				value => {
					if (value) {
						if (value["type"]) {
							if (value["name"]) {
								return (value["type"].split('/')[0] === 'image' && value["name"].lastIndexOf('.') > 0) || 'Requires a valid image file.';
							}
							return "File name not found.";
						}
						return "File type not found.";
					}
					return 'Required.';
				}
			]
		};
	},
	computed: {
		teamImageURL() {
			if (this.userTeam) {
				return this.$store.getters.loadedTeam(this.teamsListDict[this.userTeam]).imageURL;
			} else {
				return "";
			}
		},
		loading() {
			return this.$store.getters.loading;
		},
		mattermostDetails() {
			return this.$store.getters.mattermostDetails;
		},
		error() {
			return this.$store.getters.error;
		}
	},
	created() {
		this.$store.dispatch('getMattermostDetails')
		.then(() => {
			if (this.mattermostDetails.first_name && this.mattermostDetails.last_name) {
				this.userName = this.mattermostDetails.first_name + " " + this.mattermostDetails.last_name;
				this.userNameProps = {readonly: true};
			}
			if (this.mattermostDetails.email) {
				this.userEmail = this.mattermostDetails.email;
				this.emailProps = {readonly: true};
			}
			if (this.mattermostDetails.position) {
				this.userPosition = this.mattermostDetails.position;
				this.positionProps = {readonly: true};
			}
			if (this.mattermostDetails.locale === 'zh-CN') {
				this.userLang = '中文';
			}
			if (this.mattermostDetails.mattermostImgURL) {
				this.userImageURL = this.mattermostDetails.mattermostImgURL;
			}
			if (this.mattermostDetails.id) {
				this.userMattermost = this.mattermostDetails.id;
				this.mattermostProps = {readonly: true};
			}
			return this.$store.dispatch('loadTeams');
		})
		.then(() => {
			let mattermostTeamName = this.mattermostDetails.username.split("_")[0];
			for (let team of this.$store.getters.loadedTeams) {
				this.teamsList.push(team['name']);
				this.teamsListDict[team['name']] = team._id;
				if (this.teamID === team._id || (mattermostTeamName.toLowerCase() == team['name'].toLowerCase())) {
					this.userTeam = team['name'];
				}
			}
			if (!this.teamID && this.userTeam == '') {
				this.userTeam = this.teamsList[0];
			}
		})
	},
	methods: {
		formIsValid() {
			if (this.$refs.createUserForm && this.$refs.createUserForm.checkValidity) {
				if ((this.$refs.userImage && this.$refs.userImage.validate) || this.mattermostDetails.id) {
					return this.$refs.createUserForm.checkValidity() && (this.$refs.userImage.validate() || (this.mattermostDetails.id && this.userImageURL));
				}
			}
			return false;
		},
		onCreateUser() {
			if (!this.formIsValid()) {
				this.$store.dispatch('setError', 'Invalid input information.');
				return;
			}
			const userData = {
				name: this.userName,
				email: this.userEmail,
				wechat: this.userWechat,
				mattermostID: this.userMattermost,
				phoneNum: this.userPhone,
				lang: this.userLang,
				team: this.teamsListDict[this.userTeam],
				position: this.userPosition,
				introduction: this.UserIntroduction
			};
			this.$store.dispatch('createUser', {userData: userData, image: this.userImage, imageURL: this.userImageURL});
		},
		onFilePicked(file) {
			if (file) {
				let filename = file.name;
				if (!this.$refs.userImage.validate()) {
					return;
				}
				const fileReader = new FileReader()
				fileReader.addEventListener('load', () => {
					this.userImageURL = fileReader.result;
					this.userImageName = filename;
				})
				fileReader.readAsDataURL(file);
				this.userImage = file;
			} else {
				this.userImageURL = '';
				this.userImage = null;
				this.userImageName = '';
			}
		}
	}
};
</script>
