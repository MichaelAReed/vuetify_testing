<template>
	<div class="my-canvas-wrapper">
		<canvas ref="my-canvas"></canvas>
		<slot></slot>
	</div>
</template>

<script>
export default {
	props: ['checkoutDevice', 'toolReceptacle'],
	data() {
		return {
			context: 	null,
		}
	},

	mounted() {
		var img = new Image();
		img.src = checkoutDevice.imageURL;
		img.addEventListener("load", () => {
			this.context.drawImage(img,0,0);
 		},false);
		// We can't access the rendering context until the canvas is mounted to the DOM.
		// Once we have it, provide it to all child components.
		this.context = this.$refs['my-canvas'].getContext('2d')

		// Resize the canvas to fit its parent's width.
		// Normally you'd use a more flexible resize system.
		this.$refs['my-canvas'].width = this.$refs['my-canvas'].parentElement.clientWidth
		this.$refs['my-canvas'].height = this.$refs['my-canvas'].parentElement.clientHeight

		this.context.rect(toolReceptacle.internalPos.x - 10, toolReceptacle.internalPos.y - 10, 20, 20);
	},
	render () {
		// Since the parent canvas has to mount first, it's *possible* that the context may not be
		// injected by the time this render function runs the first time.
		if(!this.context) return;
		const ctx = this.context;

		// Keep a reference to the box used in the previous render call.
		const oldBox = this.oldBox
		// Calculate the new box. (Computed properties update on-demand.)
		const newBox = this.calculatedBox

		ctx.beginPath();
		// Clear the old area from the previous render.
		ctx.clearRect(oldBox.x, oldBox.y, oldBox.w, oldBox.h);
		// Clear the area for the text.
		ctx.clearRect(newBox.x, newBox.y - 42, newBox.w, 100);

		// Draw the new rectangle.
		ctx.rect(newBox.x, newBox.y, newBox.w, newBox.h);
		ctx.fillStyle = this.color;
		ctx.fill();

		// Draw the text
		ctx.fillStyle = '#000'
		ctx.font = '28px sans-serif';
		ctx.textAlign = 'center';
		ctx.fillText(Math.floor(this.value), (newBox.x + (newBox.w / 2)), newBox.y - 14)
	}
}
</script>
